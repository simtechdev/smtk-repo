; Enable apcu extension module
extension = apcu.so

; Options for the APCu module version >= 4.0.0

; This can be set to 0 to disable APC.
apc.enabled=1
; The number of shared memory segments to allocate for the compiler cache.
apc.shm_segments=1
; The size of each shared memory segment with M/G suffix.
apc.shm_size=64M
; A "hint" about the number of distinct user cache variables to store.
; Set to zero or omit if you're not sure;
apc.entries_hint=4096
; The number of seconds a cache entry is allowed to idle in a slot in case this
; cache entry slot is needed by another entry.
apc.ttl=7200
; use the SAPI request start time for TTL
apc.use_request_time=1
; The number of seconds that a cache entry may remain on the garbage-collection list.
apc.gc_ttl=3600
; If enabled, the value will be used to determine if a expunge should happen
; when low on resources.
; By default, it will happen if it is less than half full
apc.smart=0
; The mktemp-style file_mask to pass to the mmap module
apc.mmap_file_mask=/tmp/apc.XXXXXX
; If enabled, APCu attempts to prevent "slamming" of a key.
apc.slam_defense=1
; Defines which serializer should be used. Default is the standard PHP serializer.
apc.serializer='default'
; Setting this enables APC for the CLI version of PHP (Mostly for testing and debugging).
apc.enable_cli=0
; RFC1867 File Upload Progress hook handler
apc.rfc1867=0
apc.rfc1867_prefix =upload_
apc.rfc1867_name=APC_UPLOAD_PROGRESS
apc.rfc1867_freq=0
apc.rfc1867_ttl=3600
; Enables APC handling of signals, such as SIGSEGV, that write core files when signaled.
; APC will attempt to unmap the shared memory segment in order to exclude it from the core file
apc.coredump_unmap=0
